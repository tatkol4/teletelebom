import re
import logging
import datetime
from telegram import Update, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, MessageHandler, filters
from core.config import config, states
from core.database import db
from core.utils import (
    create_calendar, validate_date, validate_time, 
    validate_amount, create_time_selection_keyboard,
    create_inline_keyboard
)
from services import google_calendar
from services.notifications import notifier

logger = logging.getLogger(__name__)

async def new_order_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    return await order_command(update, context)

async def order_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    now = datetime.datetime.now()
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–∫–∞–∑–∞:</b>",
        reply_markup=create_calendar(now.year, now.month),
        parse_mode="HTML"
    )
    return states.ASK_DATE

async def calendar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split('_')
    
    if data[0] == config.CALENDAR_SELECT_DAY_PREFIX:
        year, month, day = map(int, data[1:4])
        selected_date = f"{day:02d}.{month:02d}.{year}"
        
        if not validate_date(selected_date):
            await query.edit_message_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤ –±—É–¥—É—â–µ–º.",
                reply_markup=create_calendar(year, month)
            )
            return states.ASK_DATE
        
        context.user_data['order_date'] = selected_date
        await query.edit_message_text(
            f"üìÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: *{selected_date}*\n\n‚è∞ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
            parse_mode="Markdown",
            reply_markup=create_time_selection_keyboard()
        )
        return states.ASK_TIME
    
    year, month = map(int, data[1:3])
    if data[0] == config.CALENDAR_PREV_MONTH_PREFIX:
        month -= 1
        if month == 0:
            month = 12
            year -= 1
    elif data[0] == config.CALENDAR_NEXT_MONTH_PREFIX:
        month += 1
        if month == 13:
            month = 1
            year += 1
    
    await query.edit_message_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–∫–∞–∑–∞:",
        reply_markup=create_calendar(year, month)
    )
    return states.ASK_DATE

async def time_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split('_')
    
    if data[0] == "time":
        time_slot = data[1]
        date = context.user_data.get('order_date', '')
        
        if not validate_time(date, time_slot):
            await query.edit_message_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç.",
                reply_markup=create_time_selection_keyboard()
            )
            return states.ASK_TIME
        
        context.user_data['order_time'] = time_slot
        await query.edit_message_text(
            f"‚è∞ –í—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è: *{time_slot}*\n\nüìç –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
            parse_mode="Markdown"
        )
        return states.ASK_LOCATION
    
    if data[0] == "back":
        now = datetime.datetime.now()
        await query.edit_message_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–∫–∞–∑–∞:",
            reply_markup=create_calendar(now.year, now.month)
        )
        return states.ASK_DATE
    
    return states.ASK_TIME

async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    location = update.message.text.strip()
    if len(location) < 5:
        await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
        return states.ASK_LOCATION
    
    context.user_data['order_location'] = location
    await update.message.reply_text(
        f"üìç –ú–µ—Å—Ç–æ: *{location}*\n\nüë®‚Äçüé§ –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:",
        parse_mode="Markdown",
        reply_markup=create_inline_keyboard(config.PERFORMERS_LIST, "performer", 2)
    )
    return states.ASK_PERFORMERS

async def performer_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    performer = query.data.split('_', 1)[1]
    context.user_data['order_performers'] = performer
    
    date = context.user_data.get('order_date', '')
    time = context.user_data.get('order_time', '')
    
    if performer != "–õ—é–±–æ–π —Å–≤–æ–±–æ–¥–Ω—ã–π" and not db.is_performer_available(performer, date, time):
        await query.edit_message_text(
            "‚ùå –≠—Ç–æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–Ω—è—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ.",
            reply_markup=create_inline_keyboard(config.PERFORMERS_LIST, "performer", 2)
        )
        return states.ASK_PERFORMERS
    
    await query.edit_message_text(
        f"üë®‚Äçüé§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: *{performer}*\n\nüé™ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã:",
        parse_mode="Markdown",
        reply_markup=create_inline_keyboard(config.PROGRAM_CATEGORIES, "program", 2)
    )
    return states.ASK_PROGRAM

async def program_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    program = query.data.split('_', 1)[1]
    context.user_data['program_category'] = program
    
    sub_categories = config.PROGRAM_SUB_CATEGORIES.get(program, [])
    if sub_categories:
        context.user_data['order_program'] = program
        await query.edit_message_text(
            f"üé™ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: *{program}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã:",
            parse_mode="Markdown",
            reply_markup=create_inline_keyboard(sub_categories, "subprogram", 2, True)
        )
        return states.ASK_PROGRAM_SUB
    
    context.user_data['order_program'] = program
    await query.edit_message_text(
        f"üé™ –ü—Ä–æ–≥—Ä–∞–º–º–∞: *{program}*\n\nüí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000 –∏–ª–∏ 7500.50):",
        parse_mode="Markdown"
    )
    return states.ASK_AMOUNT

async def subprogram_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back":
        await query.edit_message_text(
            "üé™ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã:",
            reply_markup=create_inline_keyboard(config.PROGRAM_CATEGORIES, "program", 2)
        )
        return states.ASK_PROGRAM
    
    subprogram = query.data.split('_', 1)[1]
    program = context.user_data.get('program_category', '')
    context.user_data['order_program'] = f"{program} - {subprogram}"
    
    await query.edit_message_text(
        f"üé™ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: *{subprogram}*\n\nüí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000 –∏–ª–∏ 7500.50):",
        parse_mode="Markdown"
    )
    return states.ASK_AMOUNT

async def amount_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    amount = update.message.text.strip()
    
    if not validate_amount(amount):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000 –∏–ª–∏ 7500.50)")
        return states.ASK_AMOUNT
    
    context.user_data['order_amount'] = amount
    await update.message.reply_text(
        f"üí∞ –°—É–º–º–∞: *{amount}*\n\nüìù –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:",
        parse_mode="Markdown"
    )
    return states.ASK_DETAILS

async def details_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    details = update.message.text.strip()
    context.user_data['order_details'] = details
    
    order_summary = (
        "üìã *–°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞*\n\n"
        f"üìÖ –î–∞—Ç–∞: {context.user_data['order_date']}\n"
        f"‚è∞ –í—Ä–µ–º—è: {context.user_data['order_time']}\n"
        f"üìç –ú–µ—Å—Ç–æ: {context.user_data['order_location']}\n"
        f"üë®‚Äçüé§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {context.user_data['order_performers']}\n"
        f"üé™ –ü—Ä–æ–≥—Ä–∞–º–º–∞: {context.user_data['order_program']}\n"
        f"üí∞ –°—É–º–º–∞: {context.user_data['order_amount']}\n"
        f"üìù –î–µ—Ç–∞–ª–∏: {details}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–∫–∞–∑?"
    )
    
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order"),
           # InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_order")
        ],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")]
    ])
    
    await update.message.reply_text(
        order_summary,
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    return states.REVIEW_ORDER

async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    order_data = {
        key: context.user_data[key] 
        for key in [
            'order_date', 'order_time', 'order_location', 
            'order_performers', 'order_program', 
            'order_amount', 'order_details'
        ]
    }
    
    user = update.effective_user
    order_data.update({
        'user_id': user.id,
        'user_name': user.full_name,
        'username': user.username
    })
    
    try:
        order_id = db.save_order(order_data)
        context.user_data['order_id'] = order_id
        
        await query.edit_message_text("‚úÖ <b>–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>", parse_mode="HTML")
        await notify_admin(context, order_data)
        
        if order_data['order_performers'] != "–õ—é–±–æ–π —Å–≤–æ–±–æ–¥–Ω—ã–π":
            performer = db.get_performer(name=order_data['order_performers'])
            if performer and performer.get('telegram_user_id'):
                await request_performer_confirmation(
                    context, 
                    performer['telegram_user_id'], 
                    order_id
                )
        
        context.job_queue.run_once(
            lambda ctx: google_calendar.sync_order_to_calendar(order_id),
            when=0
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}", exc_info=True)
        await query.edit_message_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )
    
    for key in list(context.user_data.keys()):
        if key.startswith('order_') or key == 'program_category':
            del context.user_data[key]
    
    return ConversationHandler.END

async def notify_admin(context: ContextTypes.DEFAULT_TYPE, order_data: dict):
    message = (
        "üÜï *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {order_data['user_name']} (@{order_data['username']})\n"
        f"üìÖ –î–∞—Ç–∞: {order_data['order_date']}\n"
        f"‚è∞ –í—Ä–µ–º—è: {order_data['order_time']}\n"
        f"üìç –ú–µ—Å—Ç–æ: {order_data['order_location']}\n"
        f"üé≠ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {order_data['order_performers']}\n"
        f"üé™ –ü—Ä–æ–≥—Ä–∞–º–º–∞: {order_data['order_program']}\n"
        f"üí∞ –°—É–º–º–∞: {order_data['order_amount']}\n"
        f"üìù –î–µ—Ç–∞–ª–∏: {order_data['order_details']}"
    )
    
    for admin_id in config.ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=message,
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

async def request_performer_confirmation(context: ContextTypes.DEFAULT_TYPE, performer_id: int, order_id: int):
    order = db.get_order(order_id)
    if not order:
        return
    
    message = (
        "üîÑ <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞!</b>\n\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {order['order_date']}\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {order['order_time']}\n"
        f"üìç <b>–ú–µ—Å—Ç–æ:</b> {order['order_location']}\n"
        f"üé≠ <b>–ü—Ä–æ–≥—Ä–∞–º–º–∞:</b> {order['order_program']}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞?"
    )
    
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{order_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"reject_{order_id}")
        ],
        [InlineKeyboardButton("üîÑ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", callback_data=f"reschedule_{order_id}")]
    ])
    
    try:
        await context.bot.send_message(
            chat_id=performer_id,
            text=message,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")