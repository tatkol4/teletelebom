import logging
import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    ContextTypes, 
    CallbackQueryHandler, 
    MessageHandler, 
    filters, 
    ConversationHandler
)
from core.config import config, states
from core.database import db
from services.notifications import notifier
from models.support_ticket import SupportTicket  # –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏

logger = logging.getLogger(__name__)

async def start_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(
            "üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å:",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await update.message.reply_text(
            "üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å:",
            reply_markup=ReplyKeyboardRemove()
        )
    
    return states.SUPPORT_REQUEST

async def handle_support_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_message = update.message.text.strip()
        user = update.effective_user
        
        ticket_id = db.create_support_ticket(
            user_id=user.id,
            message=user_message,
            user_name=user.full_name,
            username=user.username
        )
        
        if not ticket_id:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞")
            return ConversationHandler.END
        
        context.user_data['ticket_id'] = ticket_id
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –î–∞", callback_data="support_attach_yes")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="support_attach_no")]
        ])
        
        await update.message.reply_text(
            "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω! –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç?",
            reply_markup=keyboard
        )
        
        return states.SUPPORT_CONFIRM
    
    except Exception as e:
        logger.error(f"Error in handle_support_request: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
        return ConversationHandler.END

async def handle_support_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.callback_query:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–î–∞/–ù–µ—Ç" –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            query = update.callback_query
            await query.answer()
            choice = query.data.split('_')[-1]
            
            if choice == "yes":
                await query.edit_message_text("üìé –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç:")
                return states.SUPPORT_CONFIRM
            else:
                ticket_id = context.user_data['ticket_id']
                await finalize_support_request(context, ticket_id)
                await query.edit_message_text("üõé –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")
                return ConversationHandler.END
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ
            ticket_id = context.user_data.get('ticket_id')
            if not ticket_id:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å")
                return ConversationHandler.END
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if update.message.photo:
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
                photo = update.message.photo[-1]
                file = await photo.get_file()
                
                # =====================================================================
                # –®–ê–ì 1: –°–ö–ê–ß–ò–í–ê–ï–ú –§–û–¢–û –í –ü–ê–ú–Ø–¢–¨ –ò –°–û–ó–î–ê–ï–ú –ë–ê–ô–¢–û–í–´–ô –ú–ê–°–°–ò–í
                # =====================================================================
                photo_bytes = await file.download_as_bytearray()
                original_size = len(photo_bytes)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
                
                # =====================================================================
                # –®–ê–ì 2: –°–ñ–ê–¢–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø (–ï–°–õ–ò –£–°–¢–ê–ù–û–í–õ–ï–ù–ê BIBLIOTHEK PILLOW)
                # =====================================================================
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Pillow (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
                    from PIL import Image
                    import io
                    
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –±–∞–π—Ç–æ–≤
                    img = Image.open(io.BytesIO(photo_bytes))
                    
                    # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
                    MAX_WIDTH, MAX_HEIGHT = 1920, 1080
                    if img.width > MAX_WIDTH or img.height > MAX_HEIGHT:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
                        img.thumbnail((MAX_WIDTH, MAX_HEIGHT), Image.LANCZOS)
                        logger.info(f"Resized image to {img.width}x{img.height}")
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPEG, –µ—Å–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
                    if img.format != 'JPEG':
                        img = img.convert('RGB')
                    
                    # –°–∂–∏–º–∞–µ–º —Å –∫–∞—á–µ—Å—Ç–≤–æ–º 85%
                    output_buffer = io.BytesIO()
                    img.save(output_buffer, format='JPEG', quality=85, optimize=True)
                    compressed_bytes = output_buffer.getvalue()
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∂–∞—Ç—ã–µ –±–∞–π—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—å—à–µ
                    if len(compressed_bytes) < original_size:
                        photo_bytes = compressed_bytes
                        logger.info(f"Compressed image: {original_size} -> {len(compressed_bytes)} bytes")
                    else:
                        logger.info("Compressed image not smaller, using original")
                        
                except ImportError:
                    logger.warning("Pillow not installed, skipping compression")
                except Exception as compression_error:
                    logger.warning(f"Image compression failed: {compression_error}")
                # =====================================================================
                
                # =====================================================================
                # –®–ê–ì 3: –°–û–•–†–ê–ù–ï–ù–ò–ï –§–û–¢–û (S3 –ò–õ–ò –õ–û–ö–ê–õ–¨–ù–û)
                # =====================================================================
                photo_path = None
                
                # –í–∞—Ä–∏–∞–Ω—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –≤ AWS S3 (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–ª—é—á–∏)
                if config.S3_ENABLED:
                    try:
                        import boto3
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç S3
                        s3_client = boto3.client(
                            's3',
                            region_name=config.S3_REGION,
                            aws_access_key_id=config.AWS_ACCESS_KEY,
                            aws_secret_access_key=config.AWS_SECRET_KEY
                        )
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ñ–∞–π–ª–∞
                        s3_key = f"support/{ticket_id}.jpg"
                        
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ø–∞–º—è—Ç–∏ –≤ S3
                        s3_client.upload_fileobj(
                            io.BytesIO(photo_bytes),
                            config.S3_BUCKET,
                            s3_key,
                            ExtraArgs={
                                'ContentType': 'image/jpeg',
                                'ACL': 'private'
                            }
                        )
                        
                        photo_path = s3_key
                        logger.info(f"Uploaded to S3: s3://{config.S3_BUCKET}/{s3_key}")
                        
                    except Exception as s3_error:
                        logger.error(f"S3 upload failed: {s3_error}")
                
                # –í–∞—Ä–∏–∞–Ω—Ç 2: –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (–µ—Å–ª–∏ S3 –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞)
                if not photo_path:
                    try:
                        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
                        os.makedirs("support_attachments", exist_ok=True)
                        file_path = os.path.join("support_attachments", f"{ticket_id}.jpg")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
                        with open(file_path, 'wb') as f:
                            f.write(photo_bytes)
                        
                        photo_path = file_path
                        logger.info(f"Saved locally: {file_path}")
                        
                    except Exception as file_error:
                        logger.error(f"Local file save failed: {file_error}")
                # =====================================================================
                
                # =====================================================================
                # –®–ê–ì 4: –û–ë–ù–û–í–õ–ï–ù–ò–ï –¢–ò–ö–ï–¢–ê –í –ë–ê–ó–ï –î–ê–ù–ù–´–•
                # =====================================================================
                if photo_path:
                    with db.session_scope() as session:
                        ticket = session.query(SupportTicket).get(ticket_id)
                        if ticket:
                            ticket.photo_path = photo_path
                            session.commit()
                            logger.info(f"Updated ticket {ticket_id} with photo path")
                else:
                    logger.error("Failed to save photo for ticket {ticket_id}")
                # =====================================================================
            else:
                logger.warning("Photo message without actual photo")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
            await finalize_support_request(context, ticket_id)
            await update.message.reply_text("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            return ConversationHandler.END
    
    except Exception as e:
        logger.error(f"Error in handle_support_confirm: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
        return ConversationHandler.END

async def finalize_support_request(context: ContextTypes.DEFAULT_TYPE, ticket_id: int):
    try:
        ticket = db.get_support_ticket(ticket_id)
        if not ticket:
            logger.error(f"Ticket {ticket_id} not found in database")
            return
        
        message = (
            "üÜò <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!</b>\n\n"
            f"üÜî ID: {ticket_id}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ticket['user_name']} (@{ticket['username']})\n"
            f"üìÖ –î–∞—Ç–∞: {ticket['created_at']}\n\n"
            f"‚úâÔ∏è <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{ticket['message']}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
        if ticket.get('photo_path'):
            message += "\n\nüì∏ –ö —Å–æ–æ–±—â–µ–Ω–∏—é –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç"
        
        for operator_id in config.SUPPORT_OPERATORS:
            try:
                await context.bot.send_message(
                    chat_id=operator_id,
                    text=message,
                    parse_mode="HTML"
                )
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
                if ticket.get('photo_path'):
                    with open(ticket['photo_path'], 'rb') as photo_file:
                        await context.bot.send_photo(
                            chat_id=operator_id,
                            photo=photo_file,
                            caption=f"–°–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{ticket_id}"
                        )
            except Exception as e:
                logger.error(f"Error sending request to operator {operator_id}: {e}")
        
    except Exception as e:
        logger.error(f"Error in finalize_support_request: {e}", exc_info=True)